# Nemo config file
# YAML format 
# - use null to return None in Python
# - note that YAML is fussy about large numbers: use e.g. 1.0e+14 for M500MSun (not 1e14)

# Valid units are uK or Jy/sr
# this should be a list of maps at different frequencies
# NOTE: surveyMask is optional
unfilteredMaps:
    - {mapFileName: "weightedMap_4.fits",
       weightsFileName: "weightedInvVar_4.fits",
       obsFreqGHz: 148.0, 'units': "uK",
       beamFileName: "profiles_ACT/profile_AR1_2009_pixwin_130224.txt"}

# Masks
pointSourceMask: "pointSourceMask.fits.gz"
surveyMask: "surveyMask.fits.gz"

# Detection/catalog options
# Set useInterpolator: True for sub-pixel flux and SNR measurements
thresholdSigma: 4.0
minObjPix: 1
rejectBorder: 0
useInterpolator: False
optimalCatalogMethod: 'ref-forced'
findCenterOfMass: True
objIdent: 'ACT-CL'
longNames: False

# Photometry options
# use photFilter to choose which filter to include in the catalog as fixed filter scale measurement (fixed_delta_T_c, fixed_y_c etc.) 
photFilter: 'Arnaud_M2e14_z0p4'

# Optionally override the GNFW parameters - if not present, Arnaud et al. (2010) parameters are used
# The example below is for the Planck Pressure Profile (PPP)
#GNFWParams: {P0: 6.41, c500: 1.81, gamma: 0.31, alpha: 1.33, beta: 4.13, tol: 1e-7, npts: 100}

# Mass measurement options - used by nemoMass and nemoSelFn scripts
# Writes out .fits file to nemoOutDir/nemoOutDir_M500.fits
# redshiftCatalog:  A .fits table containing name, RADeg, decDeg, redshift, redshiftErr columns
# forcedPhotometry: If True, calc mass based on extracted y0~ in 'photFilter' map at RADeg, decDeg as given in redshiftCatalog
#                   If False, cross match redshiftCatalog with optimal catalog made by nemo
# Q:                If 'H13', use fit to Q from results presented in H13
#                   If 'fit', use fit to (theta, Q) done by nemo for 'photFilter' kernel
# tenToA0, B0, Mpivot, sigma_int: Fixed scaling relation options (see H13 or ACTPol paper)
# rescaleFactor, rescaleFactorErr: For MCal masses, as in the ACTPol paper (i.e., just rescales M500 results by 1/rescaleFactor)
massOptions:
    redshiftCatalog: "ACTPol_redshifts.fits"
    scalingRelations:
        - {tenToA0: 4.95e-5,
           B0: 0.08,
           Mpivot: 3.0e+14,
           sigma_int: 0.2,
           rescaleFactor: 0.68,
           rescaleFactorErr: 0.11}

# Selection function options
# NOTE: could eventually add 'completenessFraction' to 'massLimitMaps', which is why that's a dictionary list
calcSelFn: False
selFnOptions: {fixedSNRCut: 5.0, 
               method: 'fast',
               massLimitMaps: [{z: 0.5}]}

# Filter definitions
mapFilters:
    - {label: "Arnaud_M2e14_z0p4",
       class: "ArnaudModelRealSpaceMatchedFilter",
       params: {M500MSun: 2.0e+14, 
                z: 0.4,
                noiseParams: {method: "dataMap",
                              matchedFilterClass: 'ArnaudModelMatchedFilter',
                              RADecSection: [32.3, 38.2, -7.5, -2.5],
                              kernelMaxArcmin: 7.,
                              symmetrize: True, 
                              noiseGridArcmin: 20.},
                bckSub: True, 
                saveHighPassMap: False,
                saveRMSMap: False,
                saveFilteredMaps: True,
                outputUnits: 'yc'}}
                
# Set this to True to generate a sky sim (with noise), run all the filters over it, and measure contamination
# Set numSkySims to number required - we need to average over many as results vary a fair bit
estimateContaminationFromSkySim: False
numSkySims: 1

# Set this to True to estimate contamination by running cluster finder over inverted maps
# This is sensitive to how well point source masking is done
estimateContaminationFromInvertedMaps: False
    
# Run position recovery test
positionRecoveryTest: False

